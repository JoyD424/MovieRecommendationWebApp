# Generated by Django 2.2 on 2019-05-10 23:59

from django.db import migrations, models
from django.contrib.auth.models import User
from movieRecommendation.readInitData import getMovieDataFrame, getRatingDataFrame, getUserDataFrame
import pandas as pd



# Load all initial data (movies AND ratings)
def createDB(apps, schema_editor):
    createMovieDB(apps, schema_editor)
    createRatingDB(apps, schema_editor)
    createUserDB(apps, schema_editor)



# Delete all DB entries
def deleteDB(apps, schema_editor):
    deleteMovieDB(apps, schema_editor)
    deleteRatingDB(apps, schema_editor)
    deleteUserDB(apps, schema_editor)



# Upload initial MOVIES data from MovieLens dataset to SQLite database
def createMovieDB(apps, schema_editor):
    movieDF = getMovieDataFrame()
    Movie = apps.get_model("movieRecommendation", "Movie")

    for index in movieDF.index:
        id, title, genres = movieDF['movieID'][index], movieDF['title'][index], movieDF['genres'][index]
        newMovie = Movie(movieID = int(id), movieTitle = title, movieGenres = genres)
        newMovie.save()



# Upload initial RATINGS data from MovieLens dataset to SQLite database
def createRatingDB(apps, schema_editor):
    ratingsDF = getRatingDataFrame()
    Rating = apps.get_model("movieRecommendation", "Rating")

    for index in ratingsDF.index:
        userID, movieID, rating = ratingsDF['userID'][index], ratingsDF['movieID'][index], ratingsDF['rating'][index]

        # Fill in missing ratings (movies that user hasn't rated) as 0
        if pd.isna(rating):
            rating = 0

        newRating = Rating(userID = int(userID), movieID = int(movieID), rating = int(rating))
        newRating.save()



# Upload initial RATINGS data from MovieLens dataset to SQLite database
def createUserDB(apps, schema_editor):
    usersDF = getUserDataFrame()

    for index in usersDF.index:
        userID, zipCode = usersDF['userID'][index], str(usersDF['zipCode'][index])

        newUser = User(username = str(userID))
        newUser.set_password(zipCode)
        newUser.id = userID
        newUser.save()
    


# Delete all database entries for Movie 
def deleteMovieDB(apps, schema_editor):
    Movie = apps.get_model("movieRecommendation", "Movie")
    Movie.objects.all().delete() 
    


# Delete all database entries for Rating
def deleteRatingDB(apps, schema_editor):
    Rating = apps.get_model("movieRecommendation", "Rating")
    Rating.objects.all().delete()



# Delete all database entries for WebUser
def deleteUserDB(apps, schema_editor):
    User.objects.all().delete()



class Migration(migrations.Migration):

    dependencies = [
        ('movieRecommendation', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(createDB, reverse_code = deleteDB),
    ]
